// Code generated by MockGen. DO NOT EDIT.
// Source: finder.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repo "github.com/irbekrm/notify/internal/repo"
	reflect "reflect"
	time "time"
)

// MockFinder is a mock of Finder interface
type MockFinder struct {
	ctrl     *gomock.Controller
	recorder *MockFinderMockRecorder
}

// MockFinderMockRecorder is the mock recorder for MockFinder
type MockFinderMockRecorder struct {
	mock *MockFinder
}

// NewMockFinder creates a new mock instance
func NewMockFinder(ctrl *gomock.Controller) *MockFinder {
	mock := &MockFinder{ctrl: ctrl}
	mock.recorder = &MockFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFinder) EXPECT() *MockFinderMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockFinder) Find(arg0 context.Context, arg1 time.Time) ([]repo.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].([]repo.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockFinderMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFinder)(nil).Find), arg0, arg1)
}

// RepoName mocks base method
func (m *MockFinder) RepoName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoName")
	ret0, _ := ret[0].(string)
	return ret0
}

// RepoName indicates an expected call of RepoName
func (mr *MockFinderMockRecorder) RepoName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoName", reflect.TypeOf((*MockFinder)(nil).RepoName))
}
