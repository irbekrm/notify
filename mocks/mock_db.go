// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/irbekrm/notify/internal/github"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// FindIssue mocks base method
func (m *MockDB) FindIssue(arg0 context.Context, arg1 github.Issue, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIssue", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIssue indicates an expected call of FindIssue
func (mr *MockDBMockRecorder) FindIssue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIssue", reflect.TypeOf((*MockDB)(nil).FindIssue), arg0, arg1, arg2)
}

// WriteIssue mocks base method
func (m *MockDB) WriteIssue(arg0 context.Context, arg1 github.Issue, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteIssue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteIssue indicates an expected call of WriteIssue
func (mr *MockDBMockRecorder) WriteIssue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteIssue", reflect.TypeOf((*MockDB)(nil).WriteIssue), arg0, arg1, arg2)
}

// FindTime mocks base method
func (m *MockDB) FindTime(arg0 context.Context, arg1 string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTime", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindTime indicates an expected call of FindTime
func (mr *MockDBMockRecorder) FindTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTime", reflect.TypeOf((*MockDB)(nil).FindTime), arg0, arg1)
}

// WriteTime mocks base method
func (m *MockDB) WriteTime(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTime", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTime indicates an expected call of WriteTime
func (mr *MockDBMockRecorder) WriteTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTime", reflect.TypeOf((*MockDB)(nil).WriteTime), arg0, arg1, arg2)
}

// MockFWIssue is a mock of FWIssue interface
type MockFWIssue struct {
	ctrl     *gomock.Controller
	recorder *MockFWIssueMockRecorder
}

// MockFWIssueMockRecorder is the mock recorder for MockFWIssue
type MockFWIssueMockRecorder struct {
	mock *MockFWIssue
}

// NewMockFWIssue creates a new mock instance
func NewMockFWIssue(ctrl *gomock.Controller) *MockFWIssue {
	mock := &MockFWIssue{ctrl: ctrl}
	mock.recorder = &MockFWIssueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFWIssue) EXPECT() *MockFWIssueMockRecorder {
	return m.recorder
}

// FindIssue mocks base method
func (m *MockFWIssue) FindIssue(arg0 context.Context, arg1 github.Issue, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIssue", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIssue indicates an expected call of FindIssue
func (mr *MockFWIssueMockRecorder) FindIssue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIssue", reflect.TypeOf((*MockFWIssue)(nil).FindIssue), arg0, arg1, arg2)
}

// WriteIssue mocks base method
func (m *MockFWIssue) WriteIssue(arg0 context.Context, arg1 github.Issue, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteIssue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteIssue indicates an expected call of WriteIssue
func (mr *MockFWIssueMockRecorder) WriteIssue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteIssue", reflect.TypeOf((*MockFWIssue)(nil).WriteIssue), arg0, arg1, arg2)
}

// MockFWTime is a mock of FWTime interface
type MockFWTime struct {
	ctrl     *gomock.Controller
	recorder *MockFWTimeMockRecorder
}

// MockFWTimeMockRecorder is the mock recorder for MockFWTime
type MockFWTimeMockRecorder struct {
	mock *MockFWTime
}

// NewMockFWTime creates a new mock instance
func NewMockFWTime(ctrl *gomock.Controller) *MockFWTime {
	mock := &MockFWTime{ctrl: ctrl}
	mock.recorder = &MockFWTimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFWTime) EXPECT() *MockFWTimeMockRecorder {
	return m.recorder
}

// FindTime mocks base method
func (m *MockFWTime) FindTime(arg0 context.Context, arg1 string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTime", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindTime indicates an expected call of FindTime
func (mr *MockFWTimeMockRecorder) FindTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTime", reflect.TypeOf((*MockFWTime)(nil).FindTime), arg0, arg1)
}

// WriteTime mocks base method
func (m *MockFWTime) WriteTime(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTime", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTime indicates an expected call of WriteTime
func (mr *MockFWTimeMockRecorder) WriteTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTime", reflect.TypeOf((*MockFWTime)(nil).WriteTime), arg0, arg1, arg2)
}
